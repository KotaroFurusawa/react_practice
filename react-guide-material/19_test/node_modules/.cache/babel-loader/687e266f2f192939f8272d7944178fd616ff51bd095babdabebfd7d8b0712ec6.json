{"ast":null,"code":"import '../../utils/click/isClickableInput.js';\nimport '../../utils/dataTransfer/Clipboard.js';\nimport '../../utils/edit/isEditable.js';\nimport '../../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../../utils/keyDef/readNextDescriptor.js';\nimport { getTreeDiff } from '../../utils/misc/getTreeDiff.js';\nimport '../../utils/misc/level.js';\nimport { assertPointerEvents, hasPointerEvents } from '../../utils/pointer/cssPointerEvents.js';\nimport { isDifferentPointerPosition } from './shared.js';\nclass Pointer {\n  init(instance, position) {\n    this.position = position;\n    const target = this.getTarget(instance);\n    const [, enter] = getTreeDiff(null, target);\n    const init = this.getEventInit();\n    assertPointerEvents(instance, target);\n    instance.dispatchUIEvent(target, 'pointerover', init);\n    enter.forEach(el => instance.dispatchUIEvent(el, 'pointerenter', init));\n    return this;\n  }\n  move(instance, position) {\n    const prevPosition = this.position;\n    const prevTarget = this.getTarget(instance);\n    this.position = position;\n    if (!isDifferentPointerPosition(prevPosition, position)) {\n      return;\n    }\n    const nextTarget = this.getTarget(instance);\n    const init = this.getEventInit();\n    const [leave, enter] = getTreeDiff(prevTarget, nextTarget);\n    return {\n      leave: () => {\n        if (hasPointerEvents(instance, prevTarget)) {\n          if (prevTarget !== nextTarget) {\n            instance.dispatchUIEvent(prevTarget, 'pointerout', init);\n            leave.forEach(el => instance.dispatchUIEvent(el, 'pointerleave', init));\n          }\n        }\n      },\n      enter: () => {\n        assertPointerEvents(instance, nextTarget);\n        if (prevTarget !== nextTarget) {\n          instance.dispatchUIEvent(nextTarget, 'pointerover', init);\n          enter.forEach(el => instance.dispatchUIEvent(el, 'pointerenter', init));\n        }\n      },\n      move: () => {\n        instance.dispatchUIEvent(nextTarget, 'pointermove', init);\n      }\n    };\n  }\n  down(instance, _keyDef) {\n    if (this.isDown) {\n      return;\n    }\n    const target = this.getTarget(instance);\n    assertPointerEvents(instance, target);\n    this.isDown = true;\n    this.isPrevented = !instance.dispatchUIEvent(target, 'pointerdown', this.getEventInit());\n  }\n  up(instance, _keyDef) {\n    if (!this.isDown) {\n      return;\n    }\n    const target = this.getTarget(instance);\n    assertPointerEvents(instance, target);\n    this.isDown = false;\n    instance.dispatchUIEvent(target, 'pointerup', this.getEventInit());\n  }\n  release(instance) {\n    const target = this.getTarget(instance);\n    const [leave] = getTreeDiff(target, null);\n    const init = this.getEventInit();\n    // Currently there is no PointerEventsCheckLevel that would\n    // make this check not use the *asserted* cached value from `up`.\n    /* istanbul ignore else */\n    if (hasPointerEvents(instance, target)) {\n      instance.dispatchUIEvent(target, 'pointerout', init);\n      leave.forEach(el => instance.dispatchUIEvent(el, 'pointerleave', init));\n    }\n    this.isCancelled = true;\n  }\n  getTarget(instance) {\n    var _target;\n    return (_target = this.position.target) !== null && _target !== void 0 ? _target : instance.config.document.body;\n  }\n  getEventInit() {\n    return {\n      ...this.position.coords,\n      pointerId: this.pointerId,\n      pointerType: this.pointerType,\n      isPrimary: this.isPrimary\n    };\n  }\n  constructor(_ref) {\n    let {\n      pointerId,\n      pointerType,\n      isPrimary\n    } = _ref;\n    this.isMultitouch = false;\n    this.isCancelled = false;\n    this.isDown = false;\n    this.isPrevented = false;\n    this.position = {};\n    this.pointerId = pointerId;\n    this.pointerType = pointerType;\n    this.isPrimary = isPrimary;\n    this.isMultitouch = !isPrimary;\n  }\n}\nexport { Pointer };","map":{"version":3,"names":["getTreeDiff","assertPointerEvents","hasPointerEvents","isDifferentPointerPosition","Pointer","init","instance","position","target","getTarget","enter","getEventInit","dispatchUIEvent","forEach","el","move","prevPosition","prevTarget","nextTarget","leave","down","_keyDef","isDown","isPrevented","up","release","isCancelled","_target","config","document","body","coords","pointerId","pointerType","isPrimary","constructor","isMultitouch"],"sources":["/Users/furusawakoutarou/Desktop/programming/React/react-guide-material/19_test/node_modules/@testing-library/user-event/dist/esm/system/pointer/pointer.js"],"sourcesContent":["import '../../utils/click/isClickableInput.js';\nimport '../../utils/dataTransfer/Clipboard.js';\nimport '../../utils/edit/isEditable.js';\nimport '../../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../../utils/keyDef/readNextDescriptor.js';\nimport { getTreeDiff } from '../../utils/misc/getTreeDiff.js';\nimport '../../utils/misc/level.js';\nimport { assertPointerEvents, hasPointerEvents } from '../../utils/pointer/cssPointerEvents.js';\nimport { isDifferentPointerPosition } from './shared.js';\n\nclass Pointer {\n    init(instance, position) {\n        this.position = position;\n        const target = this.getTarget(instance);\n        const [, enter] = getTreeDiff(null, target);\n        const init = this.getEventInit();\n        assertPointerEvents(instance, target);\n        instance.dispatchUIEvent(target, 'pointerover', init);\n        enter.forEach((el)=>instance.dispatchUIEvent(el, 'pointerenter', init));\n        return this;\n    }\n    move(instance, position) {\n        const prevPosition = this.position;\n        const prevTarget = this.getTarget(instance);\n        this.position = position;\n        if (!isDifferentPointerPosition(prevPosition, position)) {\n            return;\n        }\n        const nextTarget = this.getTarget(instance);\n        const init = this.getEventInit();\n        const [leave, enter] = getTreeDiff(prevTarget, nextTarget);\n        return {\n            leave: ()=>{\n                if (hasPointerEvents(instance, prevTarget)) {\n                    if (prevTarget !== nextTarget) {\n                        instance.dispatchUIEvent(prevTarget, 'pointerout', init);\n                        leave.forEach((el)=>instance.dispatchUIEvent(el, 'pointerleave', init));\n                    }\n                }\n            },\n            enter: ()=>{\n                assertPointerEvents(instance, nextTarget);\n                if (prevTarget !== nextTarget) {\n                    instance.dispatchUIEvent(nextTarget, 'pointerover', init);\n                    enter.forEach((el)=>instance.dispatchUIEvent(el, 'pointerenter', init));\n                }\n            },\n            move: ()=>{\n                instance.dispatchUIEvent(nextTarget, 'pointermove', init);\n            }\n        };\n    }\n    down(instance, _keyDef) {\n        if (this.isDown) {\n            return;\n        }\n        const target = this.getTarget(instance);\n        assertPointerEvents(instance, target);\n        this.isDown = true;\n        this.isPrevented = !instance.dispatchUIEvent(target, 'pointerdown', this.getEventInit());\n    }\n    up(instance, _keyDef) {\n        if (!this.isDown) {\n            return;\n        }\n        const target = this.getTarget(instance);\n        assertPointerEvents(instance, target);\n        this.isDown = false;\n        instance.dispatchUIEvent(target, 'pointerup', this.getEventInit());\n    }\n    release(instance) {\n        const target = this.getTarget(instance);\n        const [leave] = getTreeDiff(target, null);\n        const init = this.getEventInit();\n        // Currently there is no PointerEventsCheckLevel that would\n        // make this check not use the *asserted* cached value from `up`.\n        /* istanbul ignore else */ if (hasPointerEvents(instance, target)) {\n            instance.dispatchUIEvent(target, 'pointerout', init);\n            leave.forEach((el)=>instance.dispatchUIEvent(el, 'pointerleave', init));\n        }\n        this.isCancelled = true;\n    }\n    getTarget(instance) {\n        var _target;\n        return (_target = this.position.target) !== null && _target !== void 0 ? _target : instance.config.document.body;\n    }\n    getEventInit() {\n        return {\n            ...this.position.coords,\n            pointerId: this.pointerId,\n            pointerType: this.pointerType,\n            isPrimary: this.isPrimary\n        };\n    }\n    constructor({ pointerId , pointerType , isPrimary  }){\n        this.isMultitouch = false;\n        this.isCancelled = false;\n        this.isDown = false;\n        this.isPrevented = false;\n        this.position = {};\n        this.pointerId = pointerId;\n        this.pointerType = pointerType;\n        this.isPrimary = isPrimary;\n        this.isMultitouch = !isPrimary;\n    }\n}\n\nexport { Pointer };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}