{"ast":null,"code":"// It is not possible to create a real FileList programmatically.\n// Therefore assigning `files` property with a programmatically created FileList results in an error.\n// Just assigning the property (as per fireEvent) breaks the interweaving with the `value` property.\nconst fakeFiles = Symbol('files and value properties are mocked');\nfunction restoreProperty(obj, prop, descriptor) {\n  if (descriptor) {\n    Object.defineProperty(obj, prop, descriptor);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete obj[prop];\n  }\n}\nfunction setFiles(el, files) {\n  var ref;\n  (ref = el[fakeFiles]) === null || ref === void 0 ? void 0 : ref.restore();\n  const typeDescr = Object.getOwnPropertyDescriptor(el, 'type');\n  const valueDescr = Object.getOwnPropertyDescriptor(el, 'value');\n  const filesDescr = Object.getOwnPropertyDescriptor(el, 'files');\n  function restore() {\n    restoreProperty(el, 'type', typeDescr);\n    restoreProperty(el, 'value', valueDescr);\n    restoreProperty(el, 'files', filesDescr);\n  }\n  el[fakeFiles] = {\n    restore\n  };\n  Object.defineProperties(el, {\n    files: {\n      configurable: true,\n      get: () => files\n    },\n    value: {\n      configurable: true,\n      get: () => files.length ? `C:\\\\fakepath\\\\${files[0].name}` : '',\n      set(v) {\n        if (v === '') {\n          restore();\n        } else {\n          var ref;\n          valueDescr === null || valueDescr === void 0 ? void 0 : (ref = valueDescr.set) === null || ref === void 0 ? void 0 : ref.call(el, v);\n        }\n      }\n    },\n    type: {\n      configurable: true,\n      get: () => 'file',\n      set(v) {\n        if (v !== 'file') {\n          restore();\n          el.type = v;\n        }\n      }\n    }\n  });\n}\nexport { setFiles };","map":{"version":3,"names":["fakeFiles","Symbol","restoreProperty","obj","prop","descriptor","Object","defineProperty","setFiles","el","files","ref","restore","typeDescr","getOwnPropertyDescriptor","valueDescr","filesDescr","defineProperties","configurable","get","value","length","name","set","v","call","type"],"sources":["/Users/furusawakoutarou/Desktop/programming/React/react-guide-material/19_test/node_modules/@testing-library/user-event/dist/esm/utils/edit/setFiles.js"],"sourcesContent":["// It is not possible to create a real FileList programmatically.\n// Therefore assigning `files` property with a programmatically created FileList results in an error.\n// Just assigning the property (as per fireEvent) breaks the interweaving with the `value` property.\nconst fakeFiles = Symbol('files and value properties are mocked');\nfunction restoreProperty(obj, prop, descriptor) {\n    if (descriptor) {\n        Object.defineProperty(obj, prop, descriptor);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete obj[prop];\n    }\n}\nfunction setFiles(el, files) {\n    var ref;\n    (ref = el[fakeFiles]) === null || ref === void 0 ? void 0 : ref.restore();\n    const typeDescr = Object.getOwnPropertyDescriptor(el, 'type');\n    const valueDescr = Object.getOwnPropertyDescriptor(el, 'value');\n    const filesDescr = Object.getOwnPropertyDescriptor(el, 'files');\n    function restore() {\n        restoreProperty(el, 'type', typeDescr);\n        restoreProperty(el, 'value', valueDescr);\n        restoreProperty(el, 'files', filesDescr);\n    }\n    el[fakeFiles] = {\n        restore\n    };\n    Object.defineProperties(el, {\n        files: {\n            configurable: true,\n            get: ()=>files\n        },\n        value: {\n            configurable: true,\n            get: ()=>files.length ? `C:\\\\fakepath\\\\${files[0].name}` : '',\n            set (v) {\n                if (v === '') {\n                    restore();\n                } else {\n                    var ref;\n                    valueDescr === null || valueDescr === void 0 ? void 0 : (ref = valueDescr.set) === null || ref === void 0 ? void 0 : ref.call(el, v);\n                }\n            }\n        },\n        type: {\n            configurable: true,\n            get: ()=>'file',\n            set (v) {\n                if (v !== 'file') {\n                    restore();\n                    el.type = v;\n                }\n            }\n        }\n    });\n}\n\nexport { setFiles };\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,SAAS,GAAGC,MAAM,CAAC,uCAAuC,CAAC;AACjE,SAASC,eAAe,CAACC,GAAG,EAAEC,IAAI,EAAEC,UAAU,EAAE;EAC5C,IAAIA,UAAU,EAAE;IACZC,MAAM,CAACC,cAAc,CAACJ,GAAG,EAAEC,IAAI,EAAEC,UAAU,CAAC;EAChD,CAAC,MAAM;IACH;IACA,OAAOF,GAAG,CAACC,IAAI,CAAC;EACpB;AACJ;AACA,SAASI,QAAQ,CAACC,EAAE,EAAEC,KAAK,EAAE;EACzB,IAAIC,GAAG;EACP,CAACA,GAAG,GAAGF,EAAE,CAACT,SAAS,CAAC,MAAM,IAAI,IAAIW,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACC,OAAO,EAAE;EACzE,MAAMC,SAAS,GAAGP,MAAM,CAACQ,wBAAwB,CAACL,EAAE,EAAE,MAAM,CAAC;EAC7D,MAAMM,UAAU,GAAGT,MAAM,CAACQ,wBAAwB,CAACL,EAAE,EAAE,OAAO,CAAC;EAC/D,MAAMO,UAAU,GAAGV,MAAM,CAACQ,wBAAwB,CAACL,EAAE,EAAE,OAAO,CAAC;EAC/D,SAASG,OAAO,GAAG;IACfV,eAAe,CAACO,EAAE,EAAE,MAAM,EAAEI,SAAS,CAAC;IACtCX,eAAe,CAACO,EAAE,EAAE,OAAO,EAAEM,UAAU,CAAC;IACxCb,eAAe,CAACO,EAAE,EAAE,OAAO,EAAEO,UAAU,CAAC;EAC5C;EACAP,EAAE,CAACT,SAAS,CAAC,GAAG;IACZY;EACJ,CAAC;EACDN,MAAM,CAACW,gBAAgB,CAACR,EAAE,EAAE;IACxBC,KAAK,EAAE;MACHQ,YAAY,EAAE,IAAI;MAClBC,GAAG,EAAE,MAAIT;IACb,CAAC;IACDU,KAAK,EAAE;MACHF,YAAY,EAAE,IAAI;MAClBC,GAAG,EAAE,MAAIT,KAAK,CAACW,MAAM,GAAI,iBAAgBX,KAAK,CAAC,CAAC,CAAC,CAACY,IAAK,EAAC,GAAG,EAAE;MAC7DC,GAAG,CAAEC,CAAC,EAAE;QACJ,IAAIA,CAAC,KAAK,EAAE,EAAE;UACVZ,OAAO,EAAE;QACb,CAAC,MAAM;UACH,IAAID,GAAG;UACPI,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAACJ,GAAG,GAAGI,UAAU,CAACQ,GAAG,MAAM,IAAI,IAAIZ,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACc,IAAI,CAAChB,EAAE,EAAEe,CAAC,CAAC;QACxI;MACJ;IACJ,CAAC;IACDE,IAAI,EAAE;MACFR,YAAY,EAAE,IAAI;MAClBC,GAAG,EAAE,MAAI,MAAM;MACfI,GAAG,CAAEC,CAAC,EAAE;QACJ,IAAIA,CAAC,KAAK,MAAM,EAAE;UACdZ,OAAO,EAAE;UACTH,EAAE,CAACiB,IAAI,GAAGF,CAAC;QACf;MACJ;IACJ;EACJ,CAAC,CAAC;AACN;AAEA,SAAShB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}