{"ast":null,"code":"import '../utils/click/isClickableInput.js';\nimport '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport { setLevelRef, ApiLevel } from '../utils/misc/level.js';\nimport { wait } from '../utils/misc/wait.js';\nimport '../options.js';\nimport { parseKeyDef } from './parseKeyDef.js';\nasync function pointer(input) {\n  const {\n    pointerMap\n  } = this.config;\n  const actions = [];\n  (Array.isArray(input) ? input : [input]).forEach(actionInput => {\n    if (typeof actionInput === 'string') {\n      actions.push(...parseKeyDef(pointerMap, actionInput));\n    } else if ('keys' in actionInput) {\n      actions.push(...parseKeyDef(pointerMap, actionInput.keys).map(i => ({\n        ...actionInput,\n        ...i\n      })));\n    } else {\n      actions.push(actionInput);\n    }\n  });\n  for (let i = 0; i < actions.length; i++) {\n    await wait(this.config);\n    await pointerAction(this, actions[i]);\n  }\n  this.system.pointer.resetClickCount();\n}\nasync function pointerAction(instance, action) {\n  var ref, ref1;\n  const pointerName = 'pointerName' in action && action.pointerName ? action.pointerName : 'keyDef' in action ? instance.system.pointer.getPointerName(action.keyDef) : 'mouse';\n  const previousPosition = instance.system.pointer.getPreviousPosition(pointerName);\n  var _target, _coords, _node, _offset;\n  const position = {\n    target: (_target = action.target) !== null && _target !== void 0 ? _target : getPrevTarget(instance, previousPosition),\n    coords: (_coords = action.coords) !== null && _coords !== void 0 ? _coords : previousPosition === null || previousPosition === void 0 ? void 0 : previousPosition.coords,\n    caret: {\n      node: (_node = action.node) !== null && _node !== void 0 ? _node : hasCaretPosition(action) ? undefined : previousPosition === null || previousPosition === void 0 ? void 0 : (ref = previousPosition.caret) === null || ref === void 0 ? void 0 : ref.node,\n      offset: (_offset = action.offset) !== null && _offset !== void 0 ? _offset : hasCaretPosition(action) ? undefined : previousPosition === null || previousPosition === void 0 ? void 0 : (ref1 = previousPosition.caret) === null || ref1 === void 0 ? void 0 : ref1.offset\n    }\n  };\n  if ('keyDef' in action) {\n    if (instance.system.pointer.isKeyPressed(action.keyDef)) {\n      setLevelRef(instance, ApiLevel.Trigger);\n      await instance.system.pointer.release(instance, action.keyDef, position);\n    }\n    if (!action.releasePrevious) {\n      setLevelRef(instance, ApiLevel.Trigger);\n      await instance.system.pointer.press(instance, action.keyDef, position);\n      if (action.releaseSelf) {\n        setLevelRef(instance, ApiLevel.Trigger);\n        await instance.system.pointer.release(instance, action.keyDef, position);\n      }\n    }\n  } else {\n    setLevelRef(instance, ApiLevel.Trigger);\n    await instance.system.pointer.move(instance, pointerName, position);\n  }\n}\nfunction hasCaretPosition(action) {\n  var _target, ref;\n  return !!((ref = (_target = action.target) !== null && _target !== void 0 ? _target : action.node) !== null && ref !== void 0 ? ref : action.offset !== undefined);\n}\nfunction getPrevTarget(instance, position) {\n  if (!position) {\n    throw new Error('This pointer has no previous position. Provide a target property!');\n  }\n  var _target;\n  return (_target = position.target) !== null && _target !== void 0 ? _target : instance.config.document.body;\n}\nexport { pointer };","map":{"version":3,"names":["setLevelRef","ApiLevel","wait","parseKeyDef","pointer","input","pointerMap","config","actions","Array","isArray","forEach","actionInput","push","keys","map","i","length","pointerAction","system","resetClickCount","instance","action","ref","ref1","pointerName","getPointerName","keyDef","previousPosition","getPreviousPosition","_target","_coords","_node","_offset","position","target","getPrevTarget","coords","caret","node","hasCaretPosition","undefined","offset","isKeyPressed","Trigger","release","releasePrevious","press","releaseSelf","move","Error","document","body"],"sources":["/Users/furusawakoutarou/Desktop/programming/React/react-guide-material/19_test/node_modules/@testing-library/user-event/dist/esm/pointer/index.js"],"sourcesContent":["import '../utils/click/isClickableInput.js';\nimport '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport { setLevelRef, ApiLevel } from '../utils/misc/level.js';\nimport { wait } from '../utils/misc/wait.js';\nimport '../options.js';\nimport { parseKeyDef } from './parseKeyDef.js';\n\nasync function pointer(input) {\n    const { pointerMap  } = this.config;\n    const actions = [];\n    (Array.isArray(input) ? input : [\n        input\n    ]).forEach((actionInput)=>{\n        if (typeof actionInput === 'string') {\n            actions.push(...parseKeyDef(pointerMap, actionInput));\n        } else if ('keys' in actionInput) {\n            actions.push(...parseKeyDef(pointerMap, actionInput.keys).map((i)=>({\n                    ...actionInput,\n                    ...i\n                })));\n        } else {\n            actions.push(actionInput);\n        }\n    });\n    for(let i = 0; i < actions.length; i++){\n        await wait(this.config);\n        await pointerAction(this, actions[i]);\n    }\n    this.system.pointer.resetClickCount();\n}\nasync function pointerAction(instance, action) {\n    var ref, ref1;\n    const pointerName = 'pointerName' in action && action.pointerName ? action.pointerName : 'keyDef' in action ? instance.system.pointer.getPointerName(action.keyDef) : 'mouse';\n    const previousPosition = instance.system.pointer.getPreviousPosition(pointerName);\n    var _target, _coords, _node, _offset;\n    const position = {\n        target: (_target = action.target) !== null && _target !== void 0 ? _target : getPrevTarget(instance, previousPosition),\n        coords: (_coords = action.coords) !== null && _coords !== void 0 ? _coords : previousPosition === null || previousPosition === void 0 ? void 0 : previousPosition.coords,\n        caret: {\n            node: (_node = action.node) !== null && _node !== void 0 ? _node : hasCaretPosition(action) ? undefined : previousPosition === null || previousPosition === void 0 ? void 0 : (ref = previousPosition.caret) === null || ref === void 0 ? void 0 : ref.node,\n            offset: (_offset = action.offset) !== null && _offset !== void 0 ? _offset : hasCaretPosition(action) ? undefined : previousPosition === null || previousPosition === void 0 ? void 0 : (ref1 = previousPosition.caret) === null || ref1 === void 0 ? void 0 : ref1.offset\n        }\n    };\n    if ('keyDef' in action) {\n        if (instance.system.pointer.isKeyPressed(action.keyDef)) {\n            setLevelRef(instance, ApiLevel.Trigger);\n            await instance.system.pointer.release(instance, action.keyDef, position);\n        }\n        if (!action.releasePrevious) {\n            setLevelRef(instance, ApiLevel.Trigger);\n            await instance.system.pointer.press(instance, action.keyDef, position);\n            if (action.releaseSelf) {\n                setLevelRef(instance, ApiLevel.Trigger);\n                await instance.system.pointer.release(instance, action.keyDef, position);\n            }\n        }\n    } else {\n        setLevelRef(instance, ApiLevel.Trigger);\n        await instance.system.pointer.move(instance, pointerName, position);\n    }\n}\nfunction hasCaretPosition(action) {\n    var _target, ref;\n    return !!((ref = (_target = action.target) !== null && _target !== void 0 ? _target : action.node) !== null && ref !== void 0 ? ref : action.offset !== undefined);\n}\nfunction getPrevTarget(instance, position) {\n    if (!position) {\n        throw new Error('This pointer has no previous position. Provide a target property!');\n    }\n    var _target;\n    return (_target = position.target) !== null && _target !== void 0 ? _target : instance.config.document.body;\n}\n\nexport { pointer };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}