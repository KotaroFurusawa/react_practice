{"ast":null,"code":"import { getTargetTypeAndSelection } from './getTargetTypeAndSelection.js';\n\n/**\n * Get the range that would be overwritten by input.\n */\nfunction getInputRange(focusNode) {\n  const typeAndSelection = getTargetTypeAndSelection(focusNode);\n  if (typeAndSelection.type === 'input') {\n    return typeAndSelection.selection;\n  } else if (typeAndSelection.type === 'contenteditable') {\n    var ref;\n    // Multi-range on contenteditable edits the first selection instead of the last\n    return (ref = typeAndSelection.selection) === null || ref === void 0 ? void 0 : ref.getRangeAt(0);\n  }\n}\nexport { getInputRange };","map":{"version":3,"names":["getTargetTypeAndSelection","getInputRange","focusNode","typeAndSelection","type","selection","ref","getRangeAt"],"sources":["/Users/furusawakoutarou/Desktop/programming/React/react-guide-material/19_test/node_modules/@testing-library/user-event/dist/esm/event/selection/getInputRange.js"],"sourcesContent":["import { getTargetTypeAndSelection } from './getTargetTypeAndSelection.js';\n\n/**\n * Get the range that would be overwritten by input.\n */ function getInputRange(focusNode) {\n    const typeAndSelection = getTargetTypeAndSelection(focusNode);\n    if (typeAndSelection.type === 'input') {\n        return typeAndSelection.selection;\n    } else if (typeAndSelection.type === 'contenteditable') {\n        var ref;\n        // Multi-range on contenteditable edits the first selection instead of the last\n        return (ref = typeAndSelection.selection) === null || ref === void 0 ? void 0 : ref.getRangeAt(0);\n    }\n}\n\nexport { getInputRange };\n"],"mappings":"AAAA,SAASA,yBAAyB,QAAQ,gCAAgC;;AAE1E;AACA;AACA;AAAI,SAASC,aAAa,CAACC,SAAS,EAAE;EAClC,MAAMC,gBAAgB,GAAGH,yBAAyB,CAACE,SAAS,CAAC;EAC7D,IAAIC,gBAAgB,CAACC,IAAI,KAAK,OAAO,EAAE;IACnC,OAAOD,gBAAgB,CAACE,SAAS;EACrC,CAAC,MAAM,IAAIF,gBAAgB,CAACC,IAAI,KAAK,iBAAiB,EAAE;IACpD,IAAIE,GAAG;IACP;IACA,OAAO,CAACA,GAAG,GAAGH,gBAAgB,CAACE,SAAS,MAAM,IAAI,IAAIC,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC;EACrG;AACJ;AAEA,SAASN,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}